{"ast":null,"code":"import t, { useRef as e, useEffect as n, useState as r } from \"react\";\nconst i = _ref => {\n    let {\n      onFinish: r,\n      x: i,\n      y: o,\n      size: a,\n      color: s,\n      duration: l\n    } = _ref;\n    const c = e(null);\n    l = null != l ? l : 600;\n    const u = {\n      position: \"absolute\",\n      background: s = null != s ? s : \"white\",\n      borderRadius: \"50%\",\n      width: \"1px\",\n      height: \"1px\",\n      left: i,\n      top: o,\n      pointerEvents: \"none\"\n    };\n    return n(() => {\n      const {\n        current: t\n      } = c;\n      t && t.animate([{\n        opacity: 1\n      }, {\n        opacity: 0,\n        width: `${a}px`,\n        height: `${a}px`,\n        transform: `translate(${a / -2}px, ${a / -2}px)`\n      }], {\n        duration: l,\n        fill: \"forwards\",\n        easing: \"ease-out\"\n      }).addEventListener(\"finish\", r);\n    }, [c]), t.createElement(\"span\", Object.assign({}, {\n      ref: c,\n      style: u\n    }));\n  },\n  o = function () {\n    let {\n      color: e,\n      duration: n,\n      maxRipples: o,\n      centered: a\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [s, l] = r([]),\n      [c, u] = r(0),\n      h = r => {\n        o && s.length >= o || l(o => {\n          const a = t.createElement(i, Object.assign({\n            key: c\n          }, r, {\n            color: null != e ? e : r.color,\n            duration: null != n ? n : r.duration,\n            onFinish: () => {\n              l(t => t.filter(t => t !== a));\n            }\n          }));\n          return u(t => t + 1), [...o, a];\n        });\n      };\n    return {\n      createByEvent: t => {\n        const {\n            clientX: e,\n            clientY: n\n          } = t,\n          r = t.currentTarget instanceof Element ? t.currentTarget : null,\n          {\n            width: i,\n            height: o,\n            left: s,\n            top: l\n          } = r ? r.getBoundingClientRect() : {\n            width: 0,\n            height: 0,\n            left: 0,\n            top: 0\n          };\n        if (a) return void h({\n          x: i / 2,\n          y: o / 2,\n          size: Math.sqrt(i ** 2 + o ** 2)\n        });\n        const c = Math.round(e - s),\n          u = Math.round(n - l),\n          d = 2 * Math.max(i - c, c) + 2,\n          p = 2 * Math.max(o - u, u) + 2,\n          g = Math.sqrt(d ** 2 + p ** 2);\n        h({\n          x: c,\n          y: u,\n          size: g\n        });\n      },\n      create: h,\n      Ripples: s\n    };\n  };\nexport { i as Ripple, o as useRipples };","map":{"version":3,"names":["i","_ref","onFinish","r","x","y","o","size","a","color","s","duration","l","c","e","u","position","background","borderRadius","width","height","left","top","pointerEvents","n","current","t","animate","opacity","transform","fill","easing","addEventListener","createElement","Object","assign","ref","style","useRipples","maxRipples","centered","arguments","length","undefined","h","key","filter","createByEvent","clientX","clientY","currentTarget","Element","getBoundingClientRect","Math","sqrt","round","d","max","p","g","create","Ripples","Ripple"],"sources":["/Users/madhavpatel/Desktop/Evently/TicketSale/frontend/node_modules/use-ripples/src/components/Ripple.tsx","/Users/madhavpatel/Desktop/Evently/TicketSale/frontend/node_modules/use-ripples/src/hooks/useRipples.tsx"],"sourcesContent":["import React, { CSSProperties, useEffect, useRef } from 'react'\n\n/**\n * Ripple props.\n */\nexport type RippleProps = {\n  onFinish(): void\n  x: number\n  y: number\n  size: number\n  color?: string\n  duration?: number\n}\n\n/**\n * Ripple component.\n */\nexport const Ripple: React.VFC<RippleProps> = ({\n  onFinish,\n  x,\n  y,\n  size,\n  color,\n  duration,\n}) => {\n  const ref = useRef<HTMLSpanElement>(null)\n\n  duration = duration ?? 600\n  color = color ?? 'white'\n\n  const style: CSSProperties = {\n    position: 'absolute',\n    background: color,\n    borderRadius: '50%',\n    width: '1px',\n    height: '1px',\n    left: x,\n    top: y,\n    pointerEvents: 'none',\n  }\n\n  useEffect(() => {\n    const { current } = ref\n    if (current) {\n      current\n        .animate(\n          [\n            {\n              opacity: 1,\n            },\n            {\n              opacity: 0,\n              width: `${size}px`,\n              height: `${size}px`,\n              transform: `translate(${size / -2}px, ${size / -2}px)`,\n            },\n          ],\n          { duration, fill: 'forwards', easing: 'ease-out' }\n        )\n        .addEventListener('finish', onFinish)\n    }\n  }, [ref])\n\n  return <span {...{ ref, style }} />\n}\n","import React, { MouseEvent, useState } from 'react'\nimport { Ripple, RippleProps } from '../components/Ripple'\n\n/**\n * UseRipplesProps type.\n */\nexport type UseRipplesProps = {\n  color?: string\n  duration?: number\n  maxRipples?: number\n  centered?: boolean\n}\n\n/**\n * UseRipplesReturn type.\n */\nexport type UseRipplesReturn = {\n  createByEvent(event: MouseEvent): void\n  create(rippleProps: Omit<RippleProps, 'onFinish'>): void\n  Ripples: JSX.Element[]\n}\n\n/**\n * UseRipples type.\n */\nexport type UseRipples = (props?: UseRipplesProps) => UseRipplesReturn\n\n/**\n * use ripples.\n */\nexport const useRipples: UseRipples = ({\n  color,\n  duration,\n  maxRipples: max,\n  centered,\n} = {}) => {\n  const [ripples, setRipples] = useState<JSX.Element[]>([])\n  const [id, setId] = useState(0)\n\n  const createByClick: UseRipplesReturn['createByEvent'] = (e) => {\n    const { clientX, clientY } = e\n    const el = e.currentTarget instanceof Element ? e.currentTarget : null\n    const { width, height, left, top } = el\n      ? el.getBoundingClientRect()\n      : { width: 0, height: 0, left: 0, top: 0 }\n\n    if (centered) {\n      create({\n        x: width / 2,\n        y: height / 2,\n        size: Math.sqrt(width ** 2 + height ** 2),\n      })\n\n      return\n    }\n\n    const x = Math.round(clientX - left)\n    const y = Math.round(clientY - top)\n\n    const sizeX = Math.max(width - x, x) * 2 + 2\n    const sizeY = Math.max(height - y, y) * 2 + 2\n    const size = Math.sqrt(sizeX ** 2 + sizeY ** 2)\n\n    create({ x, y, size })\n  }\n\n  const create: UseRipplesReturn['create'] = (p) => {\n    if (max && ripples.length >= max) {\n      return\n    }\n\n    setRipples((r) => {\n      const ripple = (\n        <Ripple\n          key={id}\n          {...p}\n          color={color ?? p.color}\n          duration={duration ?? p.duration}\n          onFinish={() => {\n            setRipples((ripples) => ripples.filter((r) => r !== ripple))\n          }}\n        />\n      )\n\n      setId((id) => id + 1)\n\n      return [...r, ripple]\n    })\n  }\n\n  return {\n    createByEvent: createByClick,\n    create,\n    Ripples: ripples,\n  }\n}\n"],"mappings":";MAiBaA,CAAA,GAAiCC,IAAA,IAM5C;IAAA,IAN4C;MAC5CC,QAAA,EAAAC,CAAA;MACAC,CAAA,EAAAJ,CAAA;MACAK,CAAA,EAAAC,CAAA;MACAC,IAAA,EAAAC,CAAA;MACAC,KAAA,EAAAC,CAAA;MACAC,QAAA,EAAAC;IAAA,IAAAX,IAAA;IAEA,MAAMY,CAAA,GAAMC,CAAA,CAAwB;IAEpCF,CAAA,GAAW,QAAAA,CAAA,GAAAA,CAAA,GAAY;IAGvB,MAAMG,CAAA,GAAuB;MAC3BC,QAAA,EAAU;MACVC,UAAA,EAJFP,CAAA,GAAQ,QAAAA,CAAA,GAAAA,CAAA,GAAS;MAKfQ,YAAA,EAAc;MACdC,KAAA,EAAO;MACPC,MAAA,EAAQ;MACRC,IAAA,EAAMrB,CAAA;MACNsB,GAAA,EAAKhB,CAAA;MACLiB,aAAA,EAAe;IAAA;IAyBjB,OAtBAC,CAAA,CAAU;MACR;QAAMC,OAAA,EAAEC;MAAA,IAAYb,CAAA;MAChBa,CAAA,IACFA,CAAA,CACGC,OAAA,CACC,CACE;QACEC,OAAA,EAAS;MAAA,GAEX;QACEA,OAAA,EAAS;QACTT,KAAA,EAAO,GAAGX,CAAA;QACVY,MAAA,EAAQ,GAAGZ,CAAA;QACXqB,SAAA,EAAW,aAAarB,CAAA,IAAQ,QAAQA,CAAA,IAAQ;MAAA,IAGpD;QAAEG,QAAA,EAAAC,CAAA;QAAUkB,IAAA,EAAM;QAAYC,MAAA,EAAQ;MAAA,GAEvCC,gBAAA,CAAiB,UAAU7B,CAAA;IAAA,GAE/B,CAACU,CAAA,IAEGa,CAAA,CAAAO,aAAA,SAAAC,MAAA,CAAAC,MAAA,KAAU;MAAEC,GAAA,EAAAvB,CAAA;MAAKwB,KAAA,EAAAtB;IAAA;EAAA;ECjCbT,CAAA,GAAyB,SAAAgC,CAAA,EAKlC;IAAA,IALkC;MACpC7B,KAAA,EAAAK,CAAA;MACAH,QAAA,EAAAa,CAAA;MACAe,UAAA,EAAYjC,CAAA;MACZkC,QAAA,EAAAhC;IAAA,IAAAiC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACE;IACF,OAAO/B,CAAA,EAASE,CAAA,IAAcT,CAAA,CAAwB;MAAA,CAC/CU,CAAA,EAAIE,CAAA,IAASZ,CAAA,CAAS;MA6BvByC,CAAA,GAAsCzC,CAAA;QACtCG,CAAA,IAAOI,CAAA,CAAQgC,MAAA,IAAUpC,CAAA,IAI7BM,CAAA,CAAYN,CAAA;UACV,MAAME,CAAA,GACJkB,CAAA,CAAAO,aAAA,CAACjC,CAAA,EAAAkC,MAAA,CAAAC,MAAA;YACCU,GAAA,EAAKhC;UAAA,GACDV,CAAA;YACJM,KAAA,EAAO,QAAAK,CAAA,GAAAA,CAAA,GAASX,CAAA,CAAEM,KAAA;YAClBE,QAAA,EAAU,QAAAa,CAAA,GAAAA,CAAA,GAAYrB,CAAA,CAAEQ,QAAA;YACxBT,QAAA,EAAUA,CAAA;cACRU,CAAA,CAAYc,CAAA,IAAYA,CAAA,CAAQoB,MAAA,CAAQpB,CAAA,IAAMA,CAAA,KAAMlB,CAAA;YAAA;UAAA;UAO1D,OAFAO,CAAA,CAAOW,CAAA,IAAOA,CAAA,GAAK,IAEZ,IAAIpB,CAAA,EAAGE,CAAA;QAAA;MAAA;IAIlB,OAAO;MACLuC,aAAA,EApDwDrB,CAAA;QACxD;YAAMsB,OAAA,EAAElC,CAAA;YAAOmC,OAAA,EAAEzB;UAAA,IAAYE,CAAA;UACvBvB,CAAA,GAAKuB,CAAA,CAAEwB,aAAA,YAAyBC,OAAA,GAAUzB,CAAA,CAAEwB,aAAA,GAAgB;UAAA;YAC5D/B,KAAA,EAAEnB,CAAA;YAAKoB,MAAA,EAAEd,CAAA;YAAMe,IAAA,EAAEX,CAAA;YAAIY,GAAA,EAAEV;UAAA,IAAQT,CAAA,GACjCA,CAAA,CAAGiD,qBAAA,KACH;YAAEjC,KAAA,EAAO;YAAGC,MAAA,EAAQ;YAAGC,IAAA,EAAM;YAAGC,GAAA,EAAK;UAAA;QAEzC,IAAId,CAAA,EAOF,YANAoC,CAAA,CAAO;UACLxC,CAAA,EAAGJ,CAAA,GAAQ;UACXK,CAAA,EAAGC,CAAA,GAAS;UACZC,IAAA,EAAM8C,IAAA,CAAKC,IAAA,CAAKtD,CAAA,IAAS,IAAIM,CAAA,IAAU;QAAA;QAM3C,MAAMO,CAAA,GAAIwC,IAAA,CAAKE,KAAA,CAAMzC,CAAA,GAAUJ,CAAA;UACzBK,CAAA,GAAIsC,IAAA,CAAKE,KAAA,CAAM/B,CAAA,GAAUZ,CAAA;UAEzB4C,CAAA,GAAiC,IAAzBH,IAAA,CAAKI,GAAA,CAAIzD,CAAA,GAAQa,CAAA,EAAGA,CAAA,IAAS;UACrC6C,CAAA,GAAkC,IAA1BL,IAAA,CAAKI,GAAA,CAAInD,CAAA,GAASS,CAAA,EAAGA,CAAA,IAAS;UACtC4C,CAAA,GAAON,IAAA,CAAKC,IAAA,CAAKE,CAAA,IAAS,IAAIE,CAAA,IAAS;QAE7Cd,CAAA,CAAO;UAAExC,CAAA,EAAAS,CAAA;UAAGR,CAAA,EAAAU,CAAA;UAAGR,IAAA,EAAAoD;QAAA;MAAA;MA6BfC,MAAA,EAAAhB,CAAA;MACAiB,OAAA,EAASnD;IAAA;EAAA;AAAA,SAAAV,CAAA,IAAA8D,MAAA,EAAAxD,CAAA,IAAAgC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}