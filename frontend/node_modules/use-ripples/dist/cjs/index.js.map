{"version":3,"file":"index.js","sources":["../../src/components/Ripple.tsx","../../src/hooks/useRipples.tsx"],"sourcesContent":["import React, { CSSProperties, useEffect, useRef } from 'react'\n\n/**\n * Ripple props.\n */\nexport type RippleProps = {\n  onFinish(): void\n  x: number\n  y: number\n  size: number\n  color?: string\n  duration?: number\n}\n\n/**\n * Ripple component.\n */\nexport const Ripple: React.VFC<RippleProps> = ({\n  onFinish,\n  x,\n  y,\n  size,\n  color,\n  duration,\n}) => {\n  const ref = useRef<HTMLSpanElement>(null)\n\n  duration = duration ?? 600\n  color = color ?? 'white'\n\n  const style: CSSProperties = {\n    position: 'absolute',\n    background: color,\n    borderRadius: '50%',\n    width: '1px',\n    height: '1px',\n    left: x,\n    top: y,\n    pointerEvents: 'none',\n  }\n\n  useEffect(() => {\n    const { current } = ref\n    if (current) {\n      current\n        .animate(\n          [\n            {\n              opacity: 1,\n            },\n            {\n              opacity: 0,\n              width: `${size}px`,\n              height: `${size}px`,\n              transform: `translate(${size / -2}px, ${size / -2}px)`,\n            },\n          ],\n          { duration, fill: 'forwards', easing: 'ease-out' }\n        )\n        .addEventListener('finish', onFinish)\n    }\n  }, [ref])\n\n  return <span {...{ ref, style }} />\n}\n","import React, { MouseEvent, useState } from 'react'\nimport { Ripple, RippleProps } from '../components/Ripple'\n\n/**\n * UseRipplesProps type.\n */\nexport type UseRipplesProps = {\n  color?: string\n  duration?: number\n  maxRipples?: number\n  centered?: boolean\n}\n\n/**\n * UseRipplesReturn type.\n */\nexport type UseRipplesReturn = {\n  createByEvent(event: MouseEvent): void\n  create(rippleProps: Omit<RippleProps, 'onFinish'>): void\n  Ripples: JSX.Element[]\n}\n\n/**\n * UseRipples type.\n */\nexport type UseRipples = (props?: UseRipplesProps) => UseRipplesReturn\n\n/**\n * use ripples.\n */\nexport const useRipples: UseRipples = ({\n  color,\n  duration,\n  maxRipples: max,\n  centered,\n} = {}) => {\n  const [ripples, setRipples] = useState<JSX.Element[]>([])\n  const [id, setId] = useState(0)\n\n  const createByClick: UseRipplesReturn['createByEvent'] = (e) => {\n    const { clientX, clientY } = e\n    const el = e.currentTarget instanceof Element ? e.currentTarget : null\n    const { width, height, left, top } = el\n      ? el.getBoundingClientRect()\n      : { width: 0, height: 0, left: 0, top: 0 }\n\n    if (centered) {\n      create({\n        x: width / 2,\n        y: height / 2,\n        size: Math.sqrt(width ** 2 + height ** 2),\n      })\n\n      return\n    }\n\n    const x = Math.round(clientX - left)\n    const y = Math.round(clientY - top)\n\n    const sizeX = Math.max(width - x, x) * 2 + 2\n    const sizeY = Math.max(height - y, y) * 2 + 2\n    const size = Math.sqrt(sizeX ** 2 + sizeY ** 2)\n\n    create({ x, y, size })\n  }\n\n  const create: UseRipplesReturn['create'] = (p) => {\n    if (max && ripples.length >= max) {\n      return\n    }\n\n    setRipples((r) => {\n      const ripple = (\n        <Ripple\n          key={id}\n          {...p}\n          color={color ?? p.color}\n          duration={duration ?? p.duration}\n          onFinish={() => {\n            setRipples((ripples) => ripples.filter((r) => r !== ripple))\n          }}\n        />\n      )\n\n      setId((id) => id + 1)\n\n      return [...r, ripple]\n    })\n  }\n\n  return {\n    createByEvent: createByClick,\n    create,\n    Ripples: ripples,\n  }\n}\n"],"names":["Ripple","onFinish","x","y","size","color","duration","ref","useRef","style","position","background","borderRadius","width","height","left","top","pointerEvents","useEffect","current","animate","opacity","transform","fill","easing","addEventListener","React","maxRipples","max","centered","ripples","setRipples","useState","id","setId","create","p","length","r","ripple","key","filter","createByEvent","e","clientX","clientY","el","currentTarget","Element","getBoundingClientRect","Math","sqrt","round","sizeX","sizeY","Ripples"],"mappings":"oLAiBaA,EAAiC,EAC5CC,WACAC,IACAC,IACAC,OACAC,QACAC,eAEA,MAAMC,EAAMC,SAAwB,MAEpCF,EAAWA,QAAAA,EAAY,IAGvB,MAAMG,EAAuB,CAC3BC,SAAU,WACVC,WAJFN,EAAQA,QAAAA,EAAS,QAKfO,aAAc,MACdC,MAAO,MACPC,OAAQ,MACRC,KAAMb,EACNc,IAAKb,EACLc,cAAe,QAyBjB,OAtBAC,aAAU,KACR,MAAMC,QAAEA,GAAYZ,EAChBY,GACFA,EACGC,QACC,CACE,CACEC,QAAS,GAEX,CACEA,QAAS,EACTR,MAAO,GAAGT,MACVU,OAAQ,GAAGV,MACXkB,UAAW,aAAalB,GAAQ,QAAQA,GAAQ,SAGpD,CAAEE,WAAUiB,KAAM,WAAYC,OAAQ,aAEvCC,iBAAiB,SAAUxB,KAE/B,CAACM,IAEGmB,gDAAU,CAAEnB,MAAKE,gDCjCY,EACpCJ,QACAC,WACAqB,WAAYC,EACZC,YACE,MACF,MAAOC,EAASC,GAAcC,WAAwB,KAC/CC,EAAIC,GAASF,WAAS,GA6BvBG,EAAsCC,IACtCR,GAAOE,EAAQO,QAAUT,GAI7BG,GAAYO,IACV,MAAMC,EACJb,wBAAC1B,iBACCwC,IAAKP,GACDG,GACJ/B,MAAOA,QAAAA,EAAS+B,EAAE/B,MAClBC,SAAUA,QAAAA,EAAY8B,EAAE9B,SACxBL,SAAU,KACR8B,GAAYD,GAAYA,EAAQW,QAAQH,GAAMA,IAAMC,UAO1D,OAFAL,GAAOD,GAAOA,EAAK,IAEZ,IAAIK,EAAGC,OAIlB,MAAO,CACLG,cApDwDC,IACxD,MAAMC,QAAEA,EAAOC,QAAEA,GAAYF,EACvBG,EAAKH,EAAEI,yBAAyBC,QAAUL,EAAEI,cAAgB,MAC5DlC,MAAEA,EAAKC,OAAEA,EAAMC,KAAEA,EAAIC,IAAEA,GAAQ8B,EACjCA,EAAGG,wBACH,CAAEpC,MAAO,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,IAAK,GAEzC,GAAIa,EAOF,YANAM,EAAO,CACLjC,EAAGW,EAAQ,EACXV,EAAGW,EAAS,EACZV,KAAM8C,KAAKC,KAAKtC,GAAS,EAAIC,GAAU,KAM3C,MAAMZ,EAAIgD,KAAKE,MAAMR,EAAU7B,GACzBZ,EAAI+C,KAAKE,MAAMP,EAAU7B,GAEzBqC,EAAiC,EAAzBH,KAAKtB,IAAIf,EAAQX,EAAGA,GAAS,EACrCoD,EAAkC,EAA1BJ,KAAKtB,IAAId,EAASX,EAAGA,GAAS,EACtCC,EAAO8C,KAAKC,KAAKE,GAAS,EAAIC,GAAS,GAE7CnB,EAAO,CAAEjC,IAAGC,IAAGC,UA6Bf+B,SACAoB,QAASzB"}